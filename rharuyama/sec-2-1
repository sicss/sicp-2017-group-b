#lang racket

; 2.1  Introduction to Data Abstraction

; Ex 2.1

(define (Make-rat n d)
  (let ((g (gcd n d)))
        (if (or (and (< n 0) (< d 0))
                (and (> n 0) (> d 0)))
            (cons (/ n g) (/ d g))
            (cons (- (/ n g)) (abs (/ d g))))))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (numer x)
  (car x))

(define (denom x)
  (cdr x))

; Ex 2.2

(define (make-segment p1 p2)
  (cons p1 p2))

(define (start-segment segment)
  (car segment))

(define (end-segment segment)
  (cdr segment))

(define (make-point x y)
  (cons x y))

(define (x-point p)
  (car p))

(define (y-point p)
  (cdr p))

(define (midpoint-segment segment)
  (make-point (average (x-point (start-segment segment))
                       (x-point (end-segment segment)))
              (average (y-point (start-segment segment))
                       (y-point (end-segment segment)))))

(define (average s t)
  (/ (+ s t) 2))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

; Ex 2.3

