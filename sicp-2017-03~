#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 872 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; sicp-2017-03"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; 1.2 Procedures and the Processes They Generate"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; Ex 1.9"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"=RECURSIVE="
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(+ 4 5)"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"(if (= a b)"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"    b"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"    (inc (+ (dec a) b)))"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"(if (= 4 5)"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"    5"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"    (inc (+ (dec 4) 5)))"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(inc (+ (dec 4) 5))"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"(inc (+ 3 5))"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(inc (inc (+ 2 5)))"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"(inc "
0 0 17 3 20 #"(inc (inc (+ 1 5))))"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"(inc (inc (inc (inc (+ 0 5)))))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"(inc (inc (inc (inc 5))))"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(inc (inc (inc 6)))"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"(inc (inc 7))"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(inc 8)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"9"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"=ITERATIVE="
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(+ 4 5)"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(+ (dec 4) (inc 5))"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(+ 3 6)"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(+ (dec 3) (inc 6))"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(+ 2 7)"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(+ (dec 2) (inc 7))"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(+ 1 8)"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"(+ (dec 1) (inc 8))"
0 0 17 29 1 #"\n"
0 0 17 3 7 #"(+ 0 9)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"9"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; Ex 1.5"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"<Case : applicative-order>"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"(test 0 (p))"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"(if (= 0 0) 0 (p))"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"(if #t 0 (p))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"0"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"<Case : normal-order>"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"(test 0 (p))"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"(if (= 0 0) 0 (p))"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"...does not halt."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Ex 1.10"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"concise"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 8 #"=number?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"second-arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"first-arity"
0 0 24 3 2 #"  "
0 0 14 3 4 #"func"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 12 #"make-product"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 12 #"second-arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"second-arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 3 #" (("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-minous"
0 0 24 3 2 #" ("
0 0 14 3 11 #"first-arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 3 #") ("
0 0 14 3 12 #"second-arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-minous"
0 0 24 3 2 #" ("
0 0 14 3 12 #"second-arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-product"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 2 #"m1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-minous"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"m1"
0 0 24 3 1 #" "
0 0 14 3 2 #"m2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"first-arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"second-arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 16 #"f n) = (*   2 n)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (g n) = (**  2 n)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (h n) = (*** 2 n)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Ex 1.11"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";<recursive>"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f-rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f-rec"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f-rec"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f-rec"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";<iterative> state variables, update, terminate test."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"f-iter"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 2 #"f0"
0 0 24 3 1 #" "
0 0 14 3 2 #"f1"
0 0 24 3 1 #" "
0 0 14 3 2 #"f2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"f2"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"f-iter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 2 #"f1"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 2 #"f2"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"f2"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 2 #"f1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 2 #"f0"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"f-iter"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Ex 1.12"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pascal"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 9 #"factorial"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pascal-triangle"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"pascal"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"      ()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Ex 1.20"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"If "
0 0 17 3 49 #"operator is primitive and operands are primitive,"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"then apply operator to operands."
0 0 17 29 1 #"\n"
0 0 17 3 56 #"If operator is primitive and operands are not primitive,"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"then evaluate operands."
0 0 17 29 1 #"\n"
0 0 17 3 56 #"If operator is not primitive and operands are primitive,"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"then evaluate operator."
0 0 17 29 1 #"\n"
0 0 17 3 60
#"If operator is not primitive and operands ore not primitive,"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"then evaluate operator and operands simoltaniously."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"When apply?"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"-(applicative-order)"
0 0 17 29 1 #"\n"
0 0 17 3 87
(
 #"  If at least one combination in process is consist of primitive ope"
 #"rator and operands,"
) 0 0 17 29 1 #"\n"
0 0 17 3 32 #"  apply it's operator to operand"
0 0 17 3 2 #"s."
0 0 17 29 1 #"\n"
0 0 17 3 30 #"-(normal-order ; fully expand)"
0 0 17 29 1 #"\n"
0 0 17 3 79
(
 #"  If all combinations in process is consist of primitive operator an"
 #"d operands,"
) 0 0 17 29 1 #"\n"
0 0 17 3 34 #"  apply it's operator to operands."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"<normal-order case>"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"(gcd 206 40)"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"(if (= 40 0) 206 (gcd 40 (remainder 206 40)))"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"   (gcd 40 (remainder 206 4"
0 0 17 3 3 #"0))"
0 0 17 29 1 #"\n"
0 0 17 3 94
(
 #"== (if (= (remainder 206 40) 0) 40 (gcd (remainder 206 40) (remainde"
 #"r 40 (remainder 206 40))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 61
#"   (gcd (remainder 206 40) (remainder 40 (remainder 206 40)))"
0 0 17 29 1 #"\n"
0 0 17 3 95
(
 #"== (if (= (remainder 40 (remainder 206 40)) 0) (remainder 206 40) (g"
 #"cd (remainder 40 (remainder"
) 0 0 17 3 76
(
 #" 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206"
 #" 40)))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 107
(
 #"   (gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 "
 #"40) (remainder 40 (remainder 206 40))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 6 #"== ..."
0 0 17 29 1 #"\n"
0 0 17 3 127
(
 #"There is not any \"remainder\" that might be evaluated because condi"
 #"tion of \"if\" cannot be primitive since it cantains remainder."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"<applicative-order case>"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"(gcd 206 40)"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"(if (= 40 0) 206 (gcd 40 (remainder 206 40)))"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"(if #f 206 (gcd 40 6))"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"(gcd 40 6)"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"(if (= 6 0) 40 (gcd 6 (remainder 40 6)))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(gcd 6 4)"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"(if (= 4 0) 6 (gcd 4 (rameinder 6 4)))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(gcd 4 2)"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"(if (= 2 0) 4 (gcd 2 (remainder 4 2)))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(gcd 2 0)"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"(if (= 0 0) 2 (gcd 0 (remainder 2 0)))"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"(if #t 2 (gcd 0 (remainder 2 0)))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"2"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
