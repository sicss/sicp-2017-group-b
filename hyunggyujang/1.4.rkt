#lang racket
(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))
(define dx 0.00001)

(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (newline)
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define (cubic a b c)
  (λ (x) (+ (* x x x) (* a x x) (* b x) c)))
(newtons-method (cubic 5 2 1) 1)

(define (double x)
  (λ (y) (x (x y))))
(define (inc x) (+ x 1))
(((double (double double)) inc) 5)
(define (compose g x)
  (λ (y) (g (x y))))
(define (square x) (* x x))
((compose square inc) 6)
(define (repeated f n)
  (define (re-iter n result)
    (if (= n 1)
        result
        (re-iter (- n 1) (compose f result))))
  (re-iter n f))
((repeated square 2) 5)
(define (smooth f)
  (λ (x) (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3)))
(define (n-fold-smooth f n) (repeated (smooth f) n))
(define (average x y) (/ (+ x y) 2))
(define (average-damp f)
  (lambda (x) (average x (f x))))
(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))
(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))
(define (n-rt n x)
  (define (searchad r)
    (if (< (/ (log (+ n 1)) (log 2)) r)
        r
        (searchad (inc r))))
  (fixed-point-of-transform (lambda (y) (/ x (fast-expt y (- n 1)))) (repeated average-damp (searchad 1)) 1.0))
(n-rt 10 1024)
(define (iterative-improve determine improve)
  (define (try guess)
    (let ((next (improve guess)))
      (if (determine guess next)
          next
          (try next))))
  (λ (x) (try x)))

             


              